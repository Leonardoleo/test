import { RequestExecuter } from "../../internal/executer";
import { AuthOptions } from "../core/tokenManager";
import { DataSetName } from "./dataops.tokens";
import { Dataset } from "./dataset";
function datasetNameErrorFactory() {
    return function () {
        throw new Error("Datasets requires valid names, please assure you provide a string value. \\ne.g. dataOperations.dataset('authors')");
    };
}
export class DataOperationsModule {
    init(coreInjector) {
        this.injector = coreInjector.resolveAndCreateChild([
            {
                provide: DataSetName,
                useFactory: datasetNameErrorFactory(),
            },
            RequestExecuter,
            Dataset,
        ]);
        return Promise.resolve(this);
    }
    getConfig() {
        return { dataOperations: {} };
    }
    dataset(dataset, auth) {
        const config = this.injector.get(AuthOptions);
        if (auth) {
            config.auth = auth;
        }
        return this.injector.resolveAndCreateChild([
            {
                provide: DataSetName,
                useValue: dataset,
            },
            {
                provide: AuthOptions,
                useValue: config,
            },
            RequestExecuter,
            Dataset,
        ]).get(Dataset);
    }
    datasets(datasets, auth) {
        return datasets.map((dataset) => this.dataset(dataset, auth));
    }
    terminate() {
        return Promise.resolve(this);
    }
}
